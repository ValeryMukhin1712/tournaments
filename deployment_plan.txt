🚀 ПЛАН АВТОМАТИЧЕСКОГО ДЕПЛОЯ FLASK ПРИЛОЖЕНИЯ НА VDS
========================================================

📋 ОБЗОР ПРОЕКТА:
- Flask приложение для управления турнирами
- Автоматический деплой через GitHub Actions
- Docker контейнеризация
- HTTPS с Let's Encrypt сертификатом
- Домен: no-ip (бесплатный DNS)
- Reverse proxy: Nginx

🎯 ЦЕЛИ:
- Автоматический деплой при каждом commit в GitHub
- Безопасное HTTPS соединение
- Контейнеризация для изоляции и масштабируемости
- Мониторинг и логирование

📋 ЭТАПЫ ВЫПОЛНЕНИЯ (В ПРАВИЛЬНОМ ПОРЯДКЕ):
============================================

🔧 ЭТАП 1: ПОДГОТОВКА СЕРВЕРА
==============================
✅ 1.1. Базовая безопасность (ВЫПОЛНЕНО)
- Создан пользователь tournament-admin
- Настроены SSH ключи
- Настроен файрвол UFW

⏳ 1.2. Установка Docker и Docker Compose
- Установка Docker Engine
- Установка Docker Compose
- Настройка прав пользователя для Docker
- Тестирование Docker

⏳ 1.3. Установка дополнительных пакетов
- Git для клонирования репозитория
- Nginx для reverse proxy
- Certbot для SSL сертификатов

🌐 ЭТАП 2: НАСТРОЙКА ДОМЕНА И SSL
=================================
⏳ 2.1. Настройка DNS (no-ip)
- Проверка работы домена
- Настройка A-записи на IP сервера
- Тестирование доступности домена

⏳ 2.2. Установка и настройка Nginx
- Установка Nginx
- Базовая конфигурация
- Настройка для работы с Docker

⏳ 2.3. Получение SSL сертификата
- Установка Certbot
- Получение Let's Encrypt сертификата
- Настройка автообновления сертификата

🐳 ЭТАП 3: КОНТЕЙНЕРИЗАЦИЯ ПРИЛОЖЕНИЯ
=====================================
⏳ 3.1. Создание Dockerfile
- Базовый образ Python
- Установка зависимостей
- Настройка рабочей директории
- Конфигурация для Flask

⏳ 3.2. Создание docker-compose.yml
- Сервис Flask приложения
- Сервис базы данных (PostgreSQL)
- Сервис Nginx
- Настройка сетей и volumes

⏳ 3.3. Адаптация приложения для Docker
- Изменение конфигурации для контейнера
- Настройка переменных окружения
- Подготовка для работы с PostgreSQL

🔄 ЭТАП 4: НАСТРОЙКА АВТОМАТИЧЕСКОГО ДЕПЛОЯ
============================================
⏳ 4.1. Создание GitHub Actions workflow
- Триггер на push в main ветку
- Сборка Docker образа
- Push в Docker Registry (опционально)
- Уведомление сервера о деплое

⏳ 4.2. Настройка webhook на сервере
- Создание endpoint для получения уведомлений
- Проверка подписи GitHub webhook
- Запуск скрипта деплоя

⏳ 4.3. Создание скрипта автоматического деплоя
- Клонирование/обновление кода
- Пересборка Docker контейнеров
- Перезапуск сервисов
- Проверка работоспособности

📊 ЭТАП 5: МОНИТОРИНГ И ЛОГИРОВАНИЕ
====================================
⏳ 5.1. Настройка логирования
- Логи Docker контейнеров
- Логи Nginx
- Логи приложения
- Ротация логов

⏳ 5.2. Мониторинг
- Health checks для контейнеров
- Мониторинг ресурсов сервера
- Уведомления о проблемах

⏳ 5.3. Резервное копирование
- Автоматическое резервное копирование БД
- Резервное копирование конфигураций
- Планировщик задач (cron)

🧪 ЭТАП 6: ТЕСТИРОВАНИЕ И ФИНАЛЬНАЯ НАСТРОЙКА
==============================================
⏳ 6.1. Тестирование деплоя
- Ручной деплой для проверки
- Тестирование автоматического деплоя
- Проверка всех функций приложения

⏳ 6.2. Оптимизация производительности
- Настройка Nginx для статики
- Оптимизация Docker контейнеров
- Настройка кэширования

⏳ 6.3. Документация
- Создание инструкций по деплою
- Документация по мониторингу
- План восстановления после сбоев

🔐 ВАРИАНТЫ SSL СЕРТИФИКАТОВ:
=============================

1. LET'S ENCRYPT (РЕКОМЕНДУЕТСЯ)
- Бесплатный
- Автоматическое обновление
- Широкое признание браузерами
- Простая настройка с Certbot

2. SELF-SIGNED СЕРТИФИКАТ
- Бесплатный
- Требует принятия предупреждения в браузере
- Подходит для тестирования

3. КОММЕРЧЕСКИЕ СЕРТИФИКАТЫ
- Платные
- Дополнительные гарантии
- Поддержка клиентов

🏗️ АРХИТЕКТУРА РЕШЕНИЯ:
========================

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   GitHub        │    │   VDS Server    │    │   no-ip DNS     │
│                 │    │                 │    │                 │
│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │
│ │ Repository  │ │    │ │    Nginx    │ │    │ │   Domain    │ │
│ │             │ │    │ │ (Port 80/443│ │    │ │             │ │
│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │
│        │        │    │        │        │    │        │        │
│ ┌─────────────┐ │    │ ┌─────────────┐ │    │        │        │
│ │GitHub Actions│ │───▶│ │Docker Compose│ │    │        │        │
│ │             │ │    │ │             │ │    │        │        │
│ └─────────────┘ │    │ └─────────────┘ │    │        │        │
│        │        │    │        │        │    │        │        │
│        │        │    │ ┌─────────────┐ │    │        │        │
│        │        │    │ │Flask App    │ │    │        │        │
│        │        │    │ │(Docker)     │ │    │        │        │
│        │        │    │ └─────────────┘ │    │        │        │
│        │        │    │        │        │    │        │        │
│        │        │    │ ┌─────────────┐ │    │        │        │
│        │        │    │ │PostgreSQL   │ │    │        │        │
│        │        │    │ │(Docker)     │ │    │        │        │
│        │        │    │ └─────────────┘ │    │        │        │
└─────────────────┘    └─────────────────┘    └─────────────────┘

📁 СТРУКТУРА ФАЙЛОВ НА СЕРВЕРЕ:
===============================
/home/tournament-admin/
├── tournament-app/                 # Основная папка приложения
│   ├── docker-compose.yml         # Оркестрация контейнеров
│   ├── Dockerfile                 # Образ Flask приложения
│   ├── nginx/                     # Конфигурация Nginx
│   │   ├── nginx.conf
│   │   └── ssl/
│   ├── scripts/                   # Скрипты деплоя
│   │   ├── deploy.sh
│   │   └── backup.sh
│   └── data/                      # Данные приложения
│       ├── postgres/              # Данные PostgreSQL
│       └── logs/                  # Логи приложения
└── ssl/                          # SSL сертификаты
    └── letsencrypt/

🔧 КОМАНДЫ ДЛЯ БЫСТРОГО СТАРТА:
===============================

# 1. Установка Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker tournament-admin

# 2. Установка Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# 3. Установка Nginx
sudo apt update
sudo apt install nginx -y

# 4. Установка Certbot
sudo apt install certbot python3-certbot-nginx -y

📋 ЧЕК-ЛИСТ ГОТОВНОСТИ:
========================
- ✅ Безопасность сервера настроена
- ✅ Docker установлен и настроен
- ⏳ Домен no-ip настроен и работает
- ⏳ SSL сертификат получен
- ⏳ Приложение контейнеризовано
- ⏳ GitHub Actions настроен
- ⏳ Автоматический деплой работает
- ⏳ Мониторинг настроен

🔍 КРИТИЧЕСКИ ВАЖНЫЕ ПРОВЕРКИ:
==============================

✅ ПРОВЕРКА 1: DOCKER УСТАНОВКА
-------------------------------
# Проверка версии Docker
docker --version
docker-compose --version

# Проверка что пользователь в группе docker
groups tournament-admin

# Тест Docker (запуск hello-world)
docker run hello-world

# Проверка статуса Docker сервиса
sudo systemctl status docker
sudo systemctl is-enabled docker

⏳ ПРОВЕРКА 2: NGINX УСТАНОВКА И НАСТРОЙКА
------------------------------------------
# Установка Nginx
sudo apt update
sudo apt install nginx -y

# Проверка статуса Nginx
sudo systemctl status nginx
sudo systemctl is-enabled nginx

# Проверка конфигурации
sudo nginx -t

# Проверка портов
sudo netstat -tlnp | grep :80
sudo netstat -tlnp | grep :443

⏳ ПРОВЕРКА 3: ДОМЕН NO-IP
---------------------------
# Проверка DNS резолвинга
nslookup your-domain.ddns.net
dig your-domain.ddns.net

# Проверка доступности домена
curl -I http://your-domain.ddns.net
ping your-domain.ddns.net

⏳ ПРОВЕРКА 4: SSL СЕРТИФИКАТ
-----------------------------
# Установка Certbot
sudo apt install certbot python3-certbot-nginx -y

# Получение сертификата
sudo certbot --nginx -d your-domain.ddns.net

# Проверка сертификата
sudo certbot certificates

# Тест автообновления
sudo certbot renew --dry-run

⏳ ПРОВЕРКА 5: DOCKER КОНТЕЙНЕРЫ
--------------------------------
# Сборка образа приложения
docker build -t tournament-app .

# Запуск контейнера
docker run -d -p 5000:5000 tournament-app

# Проверка логов
docker logs <container_id>

# Проверка статуса контейнера
docker ps
docker stats

⏳ ПРОВЕРКА 6: DOCKER COMPOSE
-----------------------------
# Проверка конфигурации
docker-compose config

# Запуск всех сервисов
docker-compose up -d

# Проверка статуса сервисов
docker-compose ps

# Проверка логов
docker-compose logs

⏳ ПРОВЕРКА 7: GITHUB ACTIONS
-----------------------------
# Проверка workflow файла
cat .github/workflows/deploy.yml

# Тест webhook endpoint
curl -X POST http://your-domain.ddns.net/webhook/github

# Проверка логов деплоя
tail -f /home/tournament-admin/tournament-app/logs/deploy.log

⏳ ПРОВЕРКА 8: АВТОМАТИЧЕСКИЙ ДЕПЛОЙ
------------------------------------
# Тест скрипта деплоя
./scripts/deploy.sh

# Проверка обновления кода
git log --oneline -5

# Проверка перезапуска контейнеров
docker-compose ps

# Проверка доступности приложения
curl -I https://your-domain.ddns.net

🚨 КРИТИЧЕСКИЕ ТОЧКИ ОТКАЗА:
============================

1. DOCKER НЕ ЗАПУСКАЕТСЯ
- Проверить статус: sudo systemctl status docker
- Перезапустить: sudo systemctl restart docker
- Проверить логи: sudo journalctl -u docker

2. NGINX НЕ РАБОТАЕТ
- Проверить конфиг: sudo nginx -t
- Проверить порты: sudo netstat -tlnp | grep nginx
- Перезапустить: sudo systemctl restart nginx

3. SSL СЕРТИФИКАТ НЕ РАБОТАЕТ
- Проверить сертификат: sudo certbot certificates
- Обновить сертификат: sudo certbot renew
- Проверить конфиг Nginx

4. КОНТЕЙНЕРЫ НЕ ЗАПУСКАЮТСЯ
- Проверить логи: docker-compose logs
- Проверить ресурсы: docker stats
- Проверить порты: netstat -tlnp

5. GITHUB WEBHOOK НЕ РАБОТАЕТ
- Проверить endpoint: curl -X POST webhook URL
- Проверить логи: tail -f logs/webhook.log
- Проверить права доступа к скриптам

6. ДОМЕН НЕ РЕЗОЛВИТСЯ
- Проверить DNS: nslookup domain
- Проверить настройки no-ip
- Проверить файрвол: sudo ufw status

🎯 СЛЕДУЮЩИЙ ЭТАП:
==================
Установка Docker и Docker Compose на сервер

Дата создания плана: $(date)
Версия: 1.0
