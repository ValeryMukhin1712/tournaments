from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from flask_wtf.csrf import CSRFProtect
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import os
import logging
import secrets
import sqlite3
from sqlalchemy import create_engine, text, inspect

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import DevelopmentConfig, ProductionConfig

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏–∑ –º–æ–¥—É–ª–µ–π
from models import create_models

# –ò–º–ø–æ—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
from routes import register_routes

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_uri = app.config['SQLALCHEMY_DATABASE_URI']
        print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_uri}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        engine = create_engine(db_uri)
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É points –≤ —Ç–∞–±–ª–∏—Ü—É participant
            if 'participant' in tables:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ points
                    columns = inspector.get_columns('participant')
                    column_names = [col['name'] for col in columns]
                    
                    if 'points' not in column_names:
                        print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'points' –≤ —Ç–∞–±–ª–∏—Ü—É 'participant'...")
                        conn.execute(text("ALTER TABLE participant ADD COLUMN points INTEGER DEFAULT 0"))
                        conn.commit()
                        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'points' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    else:
                        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'points' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'participant'")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ 'points': {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–µ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É match
            if 'match' in tables:
                try:
                    columns = inspector.get_columns('match')
                    column_names = [col['name'] for col in columns]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–µ—Ç–æ–≤
                    set_columns = [
                        'set1_score1', 'set1_score2',
                        'set2_score1', 'set2_score2', 
                        'set3_score1', 'set3_score2'
                    ]
                    
                    for col in set_columns:
                        if col not in column_names:
                            print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É '{col}' –≤ —Ç–∞–±–ª–∏—Ü—É 'match'...")
                            conn.execute(text(f"ALTER TABLE match ADD COLUMN {col} INTEGER DEFAULT 0"))
                            conn.commit()
                            print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{col}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                        else:
                            print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{col}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'match'")
                            
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å–µ—Ç–æ–≤: {e}")
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_missing_fields():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        db_uri = app.config['SQLALCHEMY_DATABASE_URI']
        if db_uri.startswith('sqlite:///'):
            db_path = db_uri.replace('sqlite:///', '')
            if not os.path.exists(db_path):
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            expected_fields = {
                'user': ['id', 'username', 'password_hash', 'role', 'created_at'],
                'tournament': ['id', 'name', 'description', 'start_date', 'end_date', 'max_participants', 
                              'court_count', 'match_duration', 'break_duration', 'sets_to_win', 
                              'points_to_win', 'points_win', 'points_draw', 'points_loss', 
                              'start_time', 'end_time', 'created_at', 'created_by'],
                'participant': ['id', 'tournament_id', 'user_id', 'name', 'is_team', 'points', 'registered_at'],
                'match': ['id', 'tournament_id', 'participant1_id', 'participant2_id', 'match_date', 
                         'match_time', 'court_number', 'match_number', 'score1', 'score2', 'score', 
                         'sets_won_1', 'sets_won_2', 'winner_id', 'status', 'created_at', 'updated_at',
                         'set1_score1', 'set1_score2', 'set2_score1', 'set2_score2', 'set3_score1', 'set3_score2'],
                'notification': ['id', 'user_id', 'message', 'is_read', 'created_at'],
                'match_log': ['id', 'match_id', 'action', 'details', 'created_at']
            }
            
            missing_fields = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            for table_name, expected_columns in expected_fields.items():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    existing_columns = [row[1] for row in cursor.fetchall()]
                    
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                    missing = [col for col in expected_columns if col not in existing_columns]
                    
                    if missing:
                        missing_fields[table_name] = missing
                        print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' - –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è: {', '.join(missing)}")
                    else:
                        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' - –≤—Å–µ –ø–æ–ª—è –Ω–∞ –º–µ—Å—Ç–µ")
                        
                except sqlite3.OperationalError as e:
                    if "no such table" in str(e):
                        print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        missing_fields[table_name] = expected_columns
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
            
            conn.close()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            if missing_fields:
                print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
                print(f"üî¥ –ù–∞–π–¥–µ–Ω–æ {len(missing_fields)} —Ç–∞–±–ª–∏—Ü —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:")
                for table, fields in missing_fields.items():
                    print(f"   - {table}: {', '.join(fields)}")
            else:
                print(f"\n‚úÖ –í–°–ï –ü–û–õ–Ø –ù–ê –ú–ï–°–¢–ï! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª—è–º.")
            
            return missing_fields
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª–µ–π: {e}")
        return {}

app = Flask(__name__)

# –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.environ.get('FLASK_ENV') == 'production':
    app.config.from_object(ProductionConfig)
else:
    app.config.from_object(DevelopmentConfig)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FLASK_ENV –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
if not os.environ.get('FLASK_ENV'):
    os.environ['FLASK_ENV'] = 'development'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF-–∑–∞—â–∏—Ç—ã
csrf = CSRFProtect(app)

# –§–æ—Ä–º–∞ –¥–ª—è –≤—Ö–æ–¥–∞
class LoginForm(FlaskForm):
    username = StringField('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', validators=[DataRequired()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', validators=[DataRequired()])
    submit = SubmitField('–í–æ–π—Ç–∏')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if os.environ.get('FLASK_ENV') == 'production':
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Railway)
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]  # –¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Railway
    )
else:
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('app.log'),
            logging.StreamHandler()
        ]
    )
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SQLAlchemy(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–∫—É—â–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º db
models = create_models(db)
User = models['User']
Tournament = models['Tournament']
Participant = models['Participant']
Match = models['Match']
Notification = models['Notification']
MatchLog = models['MatchLog']

# –ò–º–ø–æ—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
register_routes(app, db, User, Tournament, Participant, Match, Notification, MatchLog)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
@app.route('/tournament/<int:tournament_id>/export')
@login_required
def export_tournament(tournament_id):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç—É—Ä–Ω–∏—Ä–∞ –≤ Excel"""
    try:
        from routes.export import create_excel_export
        from routes.main import calculate_statistics, calculate_participant_positions
        
        tournament = Tournament.query.get_or_404(tournament_id)
        participants = Participant.query.filter_by(tournament_id=tournament_id).all()
        matches = Match.query.filter_by(tournament_id=tournament_id).all()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏
        participants.sort(key=lambda x: x.name)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        statistics = calculate_statistics(participants, matches, tournament)
        positions = calculate_participant_positions(participants, statistics)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        filepath, filename = create_excel_export(tournament, participants, matches, statistics, positions)
        
        flash(f'–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª {filename}', 'success')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return send_file(filepath, as_attachment=True, download_name=filename)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}', 'error')
        return redirect(url_for('tournament_detail', tournament_id=tournament_id))

# –ú–∏–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ init_db()

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with app.app_context():
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            print("\n" + "="*60)
            print("üîß –í–´–ü–û–õ–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("="*60)
            migrate_database()
            print("="*60 + "\n")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            admin = User.query.filter_by(username='admin').first()
            if not admin:
                admin = User(username='admin', password_hash=generate_password_hash('admin123'), role='–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                db.session.add(admin)
                db.session.commit()
                print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin/admin123")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ –±–∞–∑–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("\n" + "="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    check_missing_fields()
    print("="*60 + "\n")
    
    app.run(debug=True, host='0.0.0.0', port=5000)
