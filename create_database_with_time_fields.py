#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—è–º–∏ start_time –∏ end_time
"""

import sqlite3
import os
from datetime import datetime

def create_database():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db_path = 'instance/tournaments.db'
    if os.path.exists(db_path):
        os.remove(db_path)
        print("–°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é instance –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('instance', exist_ok=True)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
        cursor.execute('''
            CREATE TABLE user (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username VARCHAR(80) UNIQUE NOT NULL,
                email VARCHAR(120) UNIQUE NOT NULL,
                password_hash VARCHAR(128) NOT NULL,
                role VARCHAR(20) DEFAULT 'user',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tournament —Å –ø–æ–ª—è–º–∏ start_time –∏ end_time
        cursor.execute('''
            CREATE TABLE tournament (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(100) NOT NULL,
                sport_type VARCHAR(50) NOT NULL,
                start_date DATE NOT NULL,
                end_date DATE NOT NULL,
                max_participants INTEGER DEFAULT 16,
                court_count INTEGER DEFAULT 2,
                match_duration INTEGER DEFAULT 60,
                break_duration INTEGER DEFAULT 15,
                start_time TIME DEFAULT '09:00',
                end_time TIME DEFAULT '17:00',
                points_win INTEGER DEFAULT 3,
                points_draw INTEGER DEFAULT 1,
                points_loss INTEGER DEFAULT 0,
                points_to_win INTEGER DEFAULT 2,
                sets_to_win INTEGER DEFAULT 2,
                status VARCHAR(20) DEFAULT 'created',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É participant
        cursor.execute('''
            CREATE TABLE participant (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tournament_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                name VARCHAR(100) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (tournament_id) REFERENCES tournament (id) ON DELETE CASCADE,
                FOREIGN KEY (user_id) REFERENCES user (id) ON DELETE CASCADE
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É match
        cursor.execute('''
            CREATE TABLE match (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tournament_id INTEGER NOT NULL,
                participant1_id INTEGER NOT NULL,
                participant2_id INTEGER NOT NULL,
                match_date DATE,
                match_time TIME,
                court_number INTEGER,
                match_number INTEGER,
                status VARCHAR(20) DEFAULT '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
                winner_id INTEGER,
                score1 INTEGER DEFAULT 0,
                score2 INTEGER DEFAULT 0,
                set1_score1 INTEGER DEFAULT 0,
                set1_score2 INTEGER DEFAULT 0,
                set2_score1 INTEGER DEFAULT 0,
                set2_score2 INTEGER DEFAULT 0,
                set3_score1 INTEGER DEFAULT 0,
                set3_score2 INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (tournament_id) REFERENCES tournament (id) ON DELETE CASCADE,
                FOREIGN KEY (participant1_id) REFERENCES participant (id) ON DELETE CASCADE,
                FOREIGN KEY (participant2_id) REFERENCES participant (id) ON DELETE CASCADE,
                FOREIGN KEY (winner_id) REFERENCES participant (id) ON DELETE CASCADE
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute('CREATE INDEX idx_participant_tournament ON participant(tournament_id)')
        cursor.execute('CREATE INDEX idx_match_tournament ON match(tournament_id)')
        cursor.execute('CREATE INDEX idx_match_participants ON match(participant1_id, participant2_id)')
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('''
            INSERT INTO user (username, email, password_hash, role)
            VALUES ('admin', 'admin@example.com', 'pbkdf2:sha256:600000$8d9f8a8b8c8d8e8f$1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef', 'admin')
        ''')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"–°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {tables}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã tournament
        cursor.execute("PRAGMA table_info(tournament)")
        columns = cursor.fetchall()
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tournament:")
        for column in columns:
            print(f"  {column[1]} ({column[2]})")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    print("üîÑ –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—è–º–∏ –≤—Ä–µ–º–µ–Ω–∏...")
    success = create_database()
    
    if success:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å!")
