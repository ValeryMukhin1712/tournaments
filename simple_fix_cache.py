#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ SQLAlchemy
"""
import os
import sys
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def simple_fix():
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_files = ['tournament.db', 'tournaments_new.db']
        for db_file in db_files:
            if os.path.exists(db_file):
                print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_file}")
                os.remove(db_file)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞: {db_file}")
        
        print("\nüî® –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
        conn = sqlite3.connect('tournament.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user
        cursor.execute('''
            CREATE TABLE user (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username VARCHAR(80) UNIQUE NOT NULL,
                password_hash VARCHAR(120) NOT NULL,
                role VARCHAR(20) DEFAULT '—É—á–∞—Å—Ç–Ω–∏–∫',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É tournament
        cursor.execute('''
            CREATE TABLE tournament (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(200) NOT NULL,
                description TEXT,
                start_date DATE,
                end_date DATE,
                max_participants INTEGER DEFAULT 32,
                court_count INTEGER DEFAULT 2,
                match_duration INTEGER DEFAULT 60,
                break_duration INTEGER DEFAULT 10,
                sets_to_win INTEGER DEFAULT 2,
                points_to_win INTEGER DEFAULT 21,
                points_win INTEGER DEFAULT 3,
                points_draw INTEGER DEFAULT 1,
                points_loss INTEGER DEFAULT 0,
                start_time TIME DEFAULT '09:00:00',
                end_time TIME DEFAULT '17:00:00',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_by INTEGER,
                FOREIGN KEY (created_by) REFERENCES user (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É participant
        cursor.execute('''
            CREATE TABLE participant (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tournament_id INTEGER NOT NULL,
                user_id INTEGER,
                name VARCHAR(100) NOT NULL,
                is_team BOOLEAN DEFAULT 0,
                points INTEGER DEFAULT 0,
                registered_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (tournament_id) REFERENCES tournament (id),
                FOREIGN KEY (user_id) REFERENCES user (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É match
        cursor.execute('''
            CREATE TABLE match (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tournament_id INTEGER NOT NULL,
                participant1_id INTEGER NOT NULL,
                participant2_id INTEGER NOT NULL,
                score1 INTEGER,
                score2 INTEGER,
                score VARCHAR(20),
                sets_won_1 INTEGER DEFAULT 0,
                sets_won_2 INTEGER DEFAULT 0,
                winner_id INTEGER,
                match_date DATE,
                match_time TIME,
                court_number INTEGER,
                match_number INTEGER,
                status VARCHAR(20) DEFAULT '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (tournament_id) REFERENCES tournament (id),
                FOREIGN KEY (participant1_id) REFERENCES participant (id),
                FOREIGN KEY (participant2_id) REFERENCES participant (id),
                FOREIGN KEY (winner_id) REFERENCES participant (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É notification
        cursor.execute('''
            CREATE TABLE notification (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                message TEXT NOT NULL,
                is_read BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES user (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É match_log
        cursor.execute('''
            CREATE TABLE match_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                match_id INTEGER NOT NULL,
                action VARCHAR(50) NOT NULL,
                details TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (match_id) REFERENCES match (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cursor.execute('''
            INSERT INTO user (username, password_hash, role) 
            VALUES ('admin', 'pbkdf2:sha256:260000$8X9vK2xL$...', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        ''')
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã participant:")
        conn = sqlite3.connect('tournament.db')
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(participant)")
        columns = cursor.fetchall()
        for col in columns:
            print(f"   - {col[1]} ({col[2]})")
        conn.close()
        
        print("\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = simple_fix()
    if success:
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
    else:
        print("\nüí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")


