#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—É user_activity
"""

import sqlite3
import os
from datetime import datetime

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    db_path = 'instance/tournament.db'
    if not os.path.exists(db_path):
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("PRAGMA table_info(user_activity)")
        existing_columns = [row[1] for row in cursor.fetchall()]
        print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {existing_columns}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        new_columns = [
            ('login_token', 'VARCHAR(100)'),
            ('email', 'VARCHAR(100)'),
            ('expires_at', 'DATETIME'),
            ('is_terminated', 'BOOLEAN DEFAULT 0'),
            ('terminated_by', 'VARCHAR(100)'),
            ('terminated_at', 'DATETIME'),
            ('session_duration', 'INTEGER'),
            ('logout_reason', 'VARCHAR(50)'),
            ('pages_visited_count', 'INTEGER DEFAULT 0'),
            ('last_page', 'VARCHAR(200)')
        ]
        
        for column_name, column_type in new_columns:
            if column_name not in existing_columns:
                try:
                    alter_sql = f"ALTER TABLE user_activity ADD COLUMN {column_name} {column_type}"
                    cursor.execute(alter_sql)
                    print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column_name}")
                except sqlite3.Error as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
            else:
                print(f"- –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_user_activity_email ON user_activity(email)",
            "CREATE INDEX IF NOT EXISTS idx_user_activity_login_token ON user_activity(login_token)",
            "CREATE INDEX IF NOT EXISTS idx_user_activity_is_active ON user_activity(is_active)",
            "CREATE INDEX IF NOT EXISTS idx_user_activity_last_activity ON user_activity(last_activity)",
            "CREATE INDEX IF NOT EXISTS idx_user_activity_expires_at ON user_activity(expires_at)"
        ]
        
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
                print(f"‚úì –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å")
            except sqlite3.Error as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            UPDATE user_activity 
            SET is_terminated = 0, 
                pages_visited_count = 0,
                logout_reason = 'unknown'
            WHERE is_terminated IS NULL
        """)
        
        conn.commit()
        print("‚úì –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(user_activity)")
        columns = cursor.fetchall()
        print("\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_activity:")
        for col in columns:
            print(f"  {col[1]} ({col[2]})")
        
        return True
        
    except sqlite3.Error as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    success = migrate_database()
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")







